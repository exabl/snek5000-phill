import sys
from snek5000.output.base import Output as OutputBase
from phill.templates import makefile_usr


class OutputPhill(OutputBase):
    # Sources for inclusion to makefile_usr.inc
    # Dict[directory]  -> list of source files
    makefile_usr_sources = {
        "toolbox": [
            ("frame.f", "FRAMELP"),
            ("mntrlog_block.f", "MNTRLOGD"),
            ("mntrlog.f", "MNTRLOGD"),
            ("mntrtmr_block.f", "MNTRLOGD", "MNTRTMRD"),
            ("mntrtmr.f", "MNTRLOGD", "MNTRTMRD", "FRAMELP"),
            ("rprm_block.f", "RPRMD"),
            ("rprm.f", "RPRMD", "FRAMELP"),
            ("io_tools_block.f", "IOTOOLD"),
            ("io_tools.f", "IOTOOLD"),
            ("chkpoint.f", "CHKPOINTD"),
            ("chkpt_mstp.f", "CHKPTMSTPD", "CHKPOINTD"),
            ("map2D.f", "MAP2D", "FRAMELP"),
            ("stat.f", "STATD", "MAP2D", "FRAMELP"),
            ("stat_IO.f", "STATD", "MAP2D", "FRAMELP"),
            ("math_tools.f",),
        ]
    }

    # Object files to be included in compilation
    # Should be exported as USR environment variable
    makefile_usr_obj = []
    for objs in (
        (sources[0].replace(".f", ".o") for sources in list_of_sources)
        for list_of_sources in makefile_usr_sources.values()
    ):
        makefile_usr_obj.extend(objs)

    @classmethod
    def write_makefile_usr(cls, fp=sys.stdout, comments=""):
        """Write the makefile_usr.inc file which is required for compilation."""

        comments += (
            "\nAutogenerated using phill.output.Output.write_makefile_usr()"
        )

        for path_dir, list_of_sources in cls.makefile_usr_sources.items():

            list_of_relative_sources = []
            for sources in list_of_sources:
                list_of_relative_sources.append(
                    [f"{path_dir}/{file}" for file in sources]
                )

        output = makefile_usr.render(
            list_of_sources=list_of_relative_sources, comments=comments
        )
        fp.write(output)
